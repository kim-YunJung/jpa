- **Java**: [Fourpillars](https://github.com/chinghsuan/Fourpillars)와 같은 라이브러리.

@RestController
@RequestMapping("/api/saju")
public class SajuController {

    @PostMapping("/calculate")
    public ResponseEntity<Map<String, Object>> calculateSaju(@RequestBody SajuRequest request) {
        Map<String, Object> result = new HashMap<>();

        // 1. 생년월일과 시간 받기
        LocalDateTime birthDateTime = request.getBirthDateTime();
        String gender = request.getGender();

        // 2. 사주 계산 (간단 예: 십간과 지지 조합 생성)
        String yearGanZhi = calculateYearGanZhi(birthDateTime.getYear());
        String element = getElement(yearGanZhi); // 오행 해석

        // 3. 결과 반환
        result.put("yearGanZhi", yearGanZhi);
        result.put("element", element);
        result.put("gender", gender);

        return ResponseEntity.ok(result);
    }

    private String calculateYearGanZhi(int year) {
        // 간단한 천간-지지 조합 생성
        String[] heavenlyStems = {"갑", "을", "병", "정", "무", "기", "경", "신", "임", "계"};
        String[] earthlyBranches = {"자", "축", "인", "묘", "진", "사", "오", "미", "신", "유", "술", "해"};
        int stemIndex = (year - 4) % 10; // 천간 인덱스 계산
        int branchIndex = (year - 4) % 12; // 지지 인덱스 계산
        return heavenlyStems[stemIndex] + earthlyBranches[branchIndex];
    }

    private String getElement(String ganZhi) {
        // 오행 분석 예제 (단순화)
        Map<String, String> elementMap = Map.of("갑", "목", "을", "목", "병", "화", "정", "화",
                                                "무", "토", "기", "토", "경", "금", "신", "금",
                                                "임", "수", "계", "수");
        return elementMap.getOrDefault(ganZhi.substring(0, 1), "알 수 없음");
    }
}


public class SajuRequest {
    private LocalDateTime birthDateTime;
    private String gender;

    // Getter/Setter
    public LocalDateTime getBirthDateTime() {
        return birthDateTime;
    }

    public void setBirthDateTime(LocalDateTime birthDateTime) {
        this.birthDateTime = birthDateTime;
    }

    public String getGender() {
        return gender;
    }

    public void setGender(String gender) {
        this.gender = gender;
    }
}


import React, { useState } from "react";
import axios from "axios";

function SajuCalculator() {
    const [birthDateTime, setBirthDateTime] = useState("");
    const [gender, setGender] = useState("female");
    const [result, setResult] = useState(null);

    const handleSubmit = async (e) => {
        e.preventDefault();
        const data = { birthDateTime, gender };

        try {
            const response = await axios.post("/api/saju/calculate", data);
            setResult(response.data);
        } catch (error) {
            console.error(error);
        }
    };

    return (
        <div>
            <h1>사주 계산기</h1>
            <form onSubmit={handleSubmit}>
                <label>출생 날짜와 시간:</label>
                <input
                    type="datetime-local"
                    value={birthDateTime}
                    onChange={(e) => setBirthDateTime(e.target.value)}
                    required
                />
                <br />
                <label>성별:</label>
                <select value={gender} onChange={(e) => setGender(e.target.value)}>
                    <option value="female">여성</option>
                    <option value="male">남성</option>
                </select>
                <br />
                <button type="submit">계산하기</button>
            </form>

            {result && (
                <div>
                    <h2>결과:</h2>
                    <p>연간과 지지: {result.yearGanZhi}</p>
                    <p>오행: {result.element}</p>
                </div>
            )}
        </div>
    );
}

export default SajuCalculator;

