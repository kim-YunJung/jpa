## Me
spring security / jwt / oauth2기능을 설명해줘

## AI Assistant
### Spring Security / JWT / OAuth2에 대한 설명

Spring Security, JWT(Json Web Token), 그리고 OAuth2는 애플리케이션 보안에 사용되는 핵심 기술입니다. 각각의 기능과 역할을 하나씩 설명드리겠습니다.

---

### **1. Spring Security**
Spring Security는 애플리케이션의 인증(Authentication) 및 권한 부여(Authorization)를 위한 Spring 기반의 강력한 보안 프레임워크입니다. 주요 기능은 다음과 같습니다:

- **인증(Authentication)**: 애플리케이션에 로그인한 사용자를 확인합니다.
- **권한 부여(Authorization)**: 사용자가 특정 리소스(예: API)를 사용할 권한이 있는지 확인합니다.
- **CSRF 방어**: Cross-Site Request Forgery 공격으로부터 애플리케이션을 보호합니다.
- **URL 기반 보안**: 특정 URL 경로 접근 권한을 설정할 수 있습니다.
- **메서드 기반 보안**: 메서드 레벨에서 권한 체크를 수행합니다(`@Secured`, `@PreAuthorize` 등).

Spring Security 설정은 XML 또는 Java Config로 처리되며 필터 기반 구조를 가집니다. Spring Security를 사용하면 인증과 권한 정책을 유연하게 정의할 수 있습니다.

---

### **2. JWT (Json Web Token)**
JWT는 표준화된 JSON 기반 토큰으로 클라이언트와 서버 간의 보안 정보를 안전하게 전달하는 데 사용됩니다. 주로 **토큰 기반 인증**에서 사용되며, 다음의 특징이 있습니다:

#### **JWT의 구조**
JWT는 `.`으로 나뉘어진 세 부분으로 구성됩니다:
1. **Header**: 토큰 유형(JWT)과 암호화 알고리즘 정보를 포함합니다.
2. **Payload**: 사용자 정보와 추가 데이터를 포함합니다(예: ID, 권한 등).
3. **Signature**: Header와 Payload를 서버의 비밀 키를 이용해 암호화한 부분입니다.

```plain text
Header.Payload.Signature
```

#### **JWT의 특징**
- **Stateless**: 서버에서 세션 상태를 저장하지 않아 비즈니스 로직과 독립적으로 작동합니다.
- **Self-contained**: 토큰 자체에 사용자의 인증 정보를 담고 있으므로 DB 조회 없이 인증을 확인할 수 있습니다.
- **데이터 보안**: 클라이언트와 서버 간의 민감한 정보를 암호화합니다(Signature 사용).

JWT는 주로 로그인 성공 시 서버가 생성하여 클라이언트에 전달하고, 이후 요청에 포함시켜 인증 및 권한을 처리합니다.

---

### **3. OAuth2**
OAuth2는 **리소스 소유자(Resource Owner)**가 **클라이언트(Client)** 애플리케이션에게 자원에 대한 접근 권한을 부여하기 위해 사용하는 인증/인가 프로토콜입니다. 주로 소셜 로그인, API 인증 등에 사용되며, 다음과 같은 요소로 구성됩니다:

#### **OAuth2 용어**
- **Resource Owner(리소스 소유자)**: 사용자(데이터 접근 권한을 가진 사람)
- **Client(클라이언트 애플리케이션)**: 리소스 서버에 접근하려는 애플리케이션
- **Authorization Server(인증 서버)**: 리소스 소유자의 인증을 수행하고 액세스 토큰을 발급
- **Resource Server(리소스 서버)**: 클라이언트 애플리케이션이 접근하려는 데이터(API)

#### **OAuth2의 흐름**
1. 클라이언트가 인증 서버에 접속하여 인증 요청.
2. 인증 서버가 사용자를 인증한 뒤 **Authorization Code/Token** 발급.
3. 클라이언트가 발급받은 코드를 사용하여 액세스 토큰을 인증 서버에서 요청.
4. 발급받은 토큰을 사용해 **Resource Server**에 요청하여 데이터를 접근.

이러한 방식은 Google, Facebook, GitHub 등에서 제공하는 **소셜 로그인**에서도 많이 활용됩니다.

---

### **Spring Security + JWT + OAuth2 연동**
실무에서는 이 세 가지 기술을 결합해 인증 및 권한 관리를 구현합니다:
1. Spring Security를 기반으로 인증 및 권한 정책을 설정.
2. JWT를 활용해 사용자 인증 정보를 클라이언트 쪽에 저장하고 stateless 인증 처리.
3. OAuth2를 통해 인증을 위임하거나 외부 리소스에 접근 가능하게 설정(예: 소셜 로그인).

### **예시 시나리오**
- **JWT**: 사용자가 로그인하면 인증 서버가 JWT를 생성하고 클라이언트에게 반환.
- **OAuth2**: 사용자가 Google의 OAuth 인증 서버를 통해 로그인.
- **Spring Security**: 토큰을 검증하고(예: JWT의 서명 검증), 사용자의 권한에 따라 리소스 접근을 제한.

---

### 코드와 연관된 아이디어
현재 코드에서는 `OrderSimpleApiController`에 API를 제공하고 있습니다. 이 API를 보호하려면 다음과 같은 작업을 진행할 수 있습니다:
1. Spring Security를 설정해 `/api/v1/simple-orders`를 인증된 사용자만 접근 가능하게 설정합니다.
2. JWT를 통해 사용자 인증 정보를 stateless 방식으로 유지합니다.
3. OAuth2를 도입해 외부 인증 시스템(예: Google 인증)과 연동합니다.

필요하면 세부 구현에 대한 추가 설명도 제공할 수 있습니다! 😊
